// Code generated by protoc-gen-go.
// source: control_server.proto
// DO NOT EDIT!

/*
Package control_server is a generated protocol buffer package.

It is generated from these files:
	control_server.proto

It has these top-level messages:
	Heartbeat
	Command
*/
package control_server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Heartbeat struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Command struct {
	Action string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Heartbeat)(nil), "Heartbeat")
	proto.RegisterType((*Command)(nil), "Command")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Controller service

type ControllerClient interface {
	ExchangeMessages(ctx context.Context, opts ...grpc.CallOption) (Controller_ExchangeMessagesClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) ExchangeMessages(ctx context.Context, opts ...grpc.CallOption) (Controller_ExchangeMessagesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[0], c.cc, "/Controller/ExchangeMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerExchangeMessagesClient{stream}
	return x, nil
}

type Controller_ExchangeMessagesClient interface {
	Send(*Heartbeat) error
	Recv() (*Command, error)
	grpc.ClientStream
}

type controllerExchangeMessagesClient struct {
	grpc.ClientStream
}

func (x *controllerExchangeMessagesClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerExchangeMessagesClient) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	ExchangeMessages(Controller_ExchangeMessagesServer) error
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_ExchangeMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).ExchangeMessages(&controllerExchangeMessagesServer{stream})
}

type Controller_ExchangeMessagesServer interface {
	Send(*Command) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type controllerExchangeMessagesServer struct {
	grpc.ServerStream
}

func (x *controllerExchangeMessagesServer) Send(m *Command) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerExchangeMessagesServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExchangeMessages",
			Handler:       _Controller_ExchangeMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("control_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xce, 0xcf, 0x2b,
	0x29, 0xca, 0xcf, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x57, 0x92, 0xe6, 0xe2, 0xf4, 0x48, 0x4d, 0x2c, 0x2a, 0x49, 0x4a, 0x4d, 0x2c, 0x11, 0xe2, 0xe3,
	0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x51, 0x52, 0xe4,
	0x62, 0x77, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x11, 0x12, 0xe3, 0x62, 0x4b, 0x4c, 0x2e, 0xc9,
	0xcc, 0xcf, 0x83, 0x4a, 0x43, 0x79, 0x46, 0x36, 0x5c, 0x5c, 0xce, 0x10, 0x73, 0x73, 0x52, 0x8b,
	0x84, 0xf4, 0xb8, 0x04, 0x5c, 0x2b, 0x92, 0x33, 0x12, 0xf3, 0xd2, 0x53, 0x7d, 0x53, 0x8b, 0x8b,
	0x13, 0xd3, 0x53, 0x8b, 0x85, 0xb8, 0xf4, 0xe0, 0x16, 0x48, 0x71, 0xe8, 0x41, 0xcd, 0x53, 0x62,
	0xd0, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0x3b, 0xc2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x83,
	0x63, 0xbd, 0xd0, 0x9c, 0x00, 0x00, 0x00,
}
